--- Python-3.9.1/setup.py	2020-12-07 15:02:38.000000000 +0100
+++ python3-aosp/setup.py	2020-12-09 08:45:15.738723328 +0100
@@ -65,7 +65,7 @@
 MACOS = (HOST_PLATFORM == 'darwin')
 AIX = (HOST_PLATFORM.startswith('aix'))
 VXWORKS = ('vxworks' in HOST_PLATFORM)
-
+ANDROID = hasattr(sys, 'getandroidapilevel')
 
 SUMMARY = """
 Python is an interpreted, interactive, object-oriented programming
@@ -1118,6 +1118,9 @@
             # the encryption.
             return
 
+        if ANDROID:
+            return
+
         if self.compiler.find_library_file(self.lib_dirs, 'crypt'):
             libs = ['crypt']
         else:
@@ -1448,7 +1451,10 @@
                              '/usr/local/include/sqlite3',
                              ]
         if CROSS_COMPILING:
-            sqlite_inc_paths = []
+            if ANDROID:
+                sqlite_inc_paths = [f'{os.environ["APKUSR"]}/include/sqlite3']
+            else:
+                sqlite_inc_paths = []
         MIN_SQLITE_VERSION_NUMBER = (3, 7, 2)
         MIN_SQLITE_VERSION = ".".join([str(x)
                                     for x in MIN_SQLITE_VERSION_NUMBER])
@@ -1587,37 +1593,44 @@
         # You can upgrade zlib to version 1.1.4 yourself by going to
         # http://www.gzip.org/zlib/
         zlib_inc = find_file('zlib.h', [], self.inc_dirs)
-        have_zlib = False
-        if zlib_inc is not None:
-            zlib_h = zlib_inc[0] + '/zlib.h'
-            version = '"0.0.0"'
-            version_req = '"1.1.3"'
-            if MACOS and is_macosx_sdk_path(zlib_h):
-                zlib_h = os.path.join(macosx_sdk_root(), zlib_h[1:])
-            with open(zlib_h) as fp:
-                while 1:
-                    line = fp.readline()
-                    if not line:
-                        break
-                    if line.startswith('#define ZLIB_VERSION'):
-                        version = line.split()[2]
-                        break
-            if version >= version_req:
-                if (self.compiler.find_library_file(self.lib_dirs, 'z')):
-                    if MACOS:
-                        zlib_extra_link_args = ('-Wl,-search_paths_first',)
+        if ANDROID:
+            zlib_extra_link_args = ()
+            exts.append( Extension('zlib', ['zlibmodule.c'],
+                                   libraries = ['z'],
+                                   extra_link_args = zlib_extra_link_args))
+            have_zlib = True
+        else:
+            have_zlib = False
+            if zlib_inc is not None:
+                zlib_h = zlib_inc[0] + '/zlib.h'
+                version = '"0.0.0"'
+                version_req = '"1.1.3"'
+                if MACOS and is_macosx_sdk_path(zlib_h):
+                    zlib_h = os.path.join(macosx_sdk_root(), zlib_h[1:])
+                with open(zlib_h) as fp:
+                    while 1:
+                        line = fp.readline()
+                        if not line:
+                            break
+                        if line.startswith('#define ZLIB_VERSION'):
+                            version = line.split()[2]
+                            break
+                if version >= version_req:
+                    if (self.compiler.find_library_file(self.lib_dirs, 'z')):
+                        if MACOS:
+                            zlib_extra_link_args = ('-Wl,-search_paths_first',)
+                        else:
+                            zlib_extra_link_args = ()
+                        self.add(Extension('zlib', ['zlibmodule.c'],
+                                           libraries=['z'],
+                                           extra_link_args=zlib_extra_link_args))
+                        have_zlib = True
                     else:
-                        zlib_extra_link_args = ()
-                    self.add(Extension('zlib', ['zlibmodule.c'],
-                                       libraries=['z'],
-                                       extra_link_args=zlib_extra_link_args))
-                    have_zlib = True
+                        self.missing.append('zlib')
                 else:
                     self.missing.append('zlib')
             else:
                 self.missing.append('zlib')
-        else:
-            self.missing.append('zlib')
 
         # Helper module for various ascii-encoders.  Uses zlib for an optimized
         # crc32 if we have it.  Otherwise binascii uses its own.
@@ -1643,6 +1656,8 @@
             self.add(Extension('_bz2', ['_bz2module.c'],
                                libraries=['bz2'],
                                extra_link_args=bz2_extra_link_args))
+        elif ANDROID:
+            exts.append( Extension('_bz2', ['_bz2module.c'], libraries = ['bz2'], extra_link_args = [f"-L{os.environ['APKUSR']}/lib",f"-I{os.environ['APKUSR']}/include"]) )
         else:
             self.missing.append('_bz2')
 
@@ -1650,6 +1665,8 @@
         if self.compiler.find_library_file(self.lib_dirs, 'lzma'):
             self.add(Extension('_lzma', ['_lzmamodule.c'],
                                libraries=['lzma']))
+        elif ANDROID:
+            exts.append( Extension('_lzma', ['_lzmamodule.c'], libraries = ['lzma'], extra_link_args = [f"-L{os.environ['APKUSR']}/lib",f"-I{os.environ['APKUSR']}/include"]) )
         else:
             self.missing.append('_lzma')
 
@@ -1772,6 +1789,8 @@
             self.add(Extension('_uuid', ['_uuidmodule.c'],
                                libraries=uuid_libs,
                                include_dirs=uuid_incs))
+        elif ANDROID:
+            self.missing.append('_uuid')
         else:
             self.missing.append('_uuid')
 
@@ -2167,10 +2186,17 @@
             if not os.path.exists(ffi_h):
                 ffi_inc = None
                 print('Header file {} does not exist'.format(ffi_h))
+
+        ffi_libdir = [sysconfig.get_config_var("LIBFFI_LIBDIR")]
+        ffi_libdir = [d for d in ffi_libdir if os.path.isdir(d)]
+
         if ffi_lib is None and ffi_inc:
             for lib_name in ('ffi', 'ffi_pic'):
-                if (self.compiler.find_library_file(self.lib_dirs, lib_name)):
+#                if (self.compiler.find_library_file(self.lib_dirs, lib_name)):
+                fullpath = self.compiler.find_library_file(self.lib_dirs + ffi_libdir, lib_name)
+                if fullpath:
                     ffi_lib = lib_name
+                    ffi_libdir = os.path.normpath(os.path.dirname(fullpath))
                     break
 
         if ffi_inc and ffi_lib:
@@ -2184,8 +2210,11 @@
 
             ext.include_dirs.append(ffi_inc)
             ext.libraries.append(ffi_lib)
+            if ffi_libdir not in self.lib_dirs:
+                ext.library_dirs.append(ffi_libdir)
             self.use_system_libffi = True
 
+
         if sysconfig.get_config_var('HAVE_LIBDL'):
             # for dlopen, see bpo-32647
             ext.libraries.append('dl')
